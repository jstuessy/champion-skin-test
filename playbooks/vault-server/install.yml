---
- name: Setup Vault Server
  hosts: subject_vault_server
  vars:
    consul_version: "1.9.5"
    vault_version: "1.7.2"
  tasks:
    - amazon.aws.ec2_metadata_facts:
    - import_role:
        name: general-setup
    - import_role:
        name: consul-client-setup
    - import_role:
        name: vault-install
    # - Look for vault secrets
    # - Store vault secrets
    - name: Ensure vault group exists
      ansible.builtin.group:
        name: vault
        state: present
      become: true
    - name: Ensure vault user exists
      ansible.builtin.user:
        name: vault
        group: vault
        system: true
        shell: /sbin/nologin
        createhome: false
      become: true
    - name: Copy over systemd service file
      become: true
      ansible.builtin.template:
        src: vault-server.service.j2
        dest: /usr/lib/systemd/system/vault-server.service
        mode: "660"
        owner: vault
        group: vault
    - name: Copy over vault configuration files
      become: true
      ansible.builtin.template:
        src: "{{ item }}.j2"
        dest: "/etc/vault.d/{{ item }}"
        mode: "640"
        owner: vault
        group: vault
      loop:
        - "server.hcl"
    - name: Enable vault service
      become: true
      ansible.builtin.systemd:
        name: vault-server
        enabled: true
    - name: Start vault service
      become: true
      ansible.builtin.systemd:
        name: vault-server
        state: started
    - name: Restart vault service
      become: true
      ansible.builtin.systemd:
        name: vault-server
        state: restarted
    - name: Reload Daemon
      become: true
      ansible.builtin.systemd:
        daemon_reload: true
    - name: Verify if vault is initialized
      command: "vault operator init -status -format=json"
      environment:
        VAULT_ADDR: "http://127.0.0.1:8200"
      register: vault_operator_init_status
      failed_when: 
        - vault_operator_init_status.rc not in [ 0, 2 ]
        - not vault_operator_init_status.stderr
    - name: Initialize vault if not already initialized
      command: "vault operator init -format=json"
      register: vault_operator_initialization
      environment:
        VAULT_ADDR: "http://127.0.0.1:8200"
      run_once: true
      when: not (vault_operator_init_status.stdout | from_json)["Initialized"]
    - name: Store unseal encryption keys and root token
      delegate_to: "localhost"
      when: not (vault_operator_init_status.stdout | from_json)["Initialized"]
      run_once: true
      ansible.builtin.copy:
        content: "{{ vault_operator_initialization.stdout }}"
        dest: "/tmp/vault_unseal_keys.json"
    - name: Parse new unseal keys
      set_fact:
        vault_unseal_keys: "{{ (vault_operator_initialization.stdout | from_json)['unseal_keys_b64'] }}"
      when: not (vault_operator_init_status.stdout | from_json)["Initialized"]
    - name: Fetch & Parse new Root Token
      set_fact:
        vault_initial_root_token: "{{ (lookup('file', '/tmp/vault_unseal_keys.json') | from_json)['root_token'] }}"
      when: not (vault_operator_init_status.stdout | from_json)["Initialized"] 
    - name: Fetch & Parse already existing unseal keys
      set_fact:
        vault_unseal_keys: "{{ (lookup('file', '/tmp/vault_unseal_keys.json') | from_json)['unseal_keys_b64'] }}"
      when: (vault_operator_init_status.stdout | from_json)["Initialized"]
    - name: Fetch & Parse already existing Root Token
      set_fact:
        vault_initial_root_token: "{{ (lookup('file', '/tmp/vault_unseal_keys.json') | from_json)['root_token'] }}"
      when: (vault_operator_init_status.stdout | from_json)["Initialized"]    
    - name: Unseal vault 
      command: "vault operator unseal {{ item }}"
      loop: "{{ vault_unseal_keys }}"
      environment:
        VAULT_ADDR: "http://127.0.0.1:8200"